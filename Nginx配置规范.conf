##########################
# Nginx配置范围说明      #
##########################

##########################
# Nginx全局配参          #
##########################
# 指定nginx进程运行用户以及用户组
user www www;
# nginx要开启的进程数为8
worker_processes 8;
# 全局错误日志文件
# debug输出日志最为详细，而crit输出日志最少/var/log目录是linux下的日志存放目录
error_log /var/log/nginx/nginx_error.log crit;
# 指定进程id的存储位置
pid /var/run/nginx.pid;
# 绑定worker进程和CPU，linux内核2.4以上可用
worker_rlimit_nofile 51200;
# nginx的工作模式及连接输上线
events {
    # nginx工作模式，epoll是linux平台下的高效模式
    #epoll是多路复用IO(I/O Multiplexing)中的一种方式,
    #仅用于linux2.6以上内核,可以大大提高nginx的性能
    use epoll;
    # 定义nginx每个进程的最大连接数为51200，Linux下最大IO为 65535,配置时
    # 应根据当前服务器的实际用途和业务性质,预留一定的余量,避免系统IO阻塞
    worker_connections 51200;
    # 并发总数是 worker_processes 和 worker_connections 的乘积
    # 即 max_clients = worker_processes * worker_connections
    #
    # 在设置了反向代理的情况下，max_clients = worker_processes * worker_connections / 4  为什么
    # 为什么上面反向代理要除以4，应该说是一个经验值
    # 根据以上条件，正常情况下的Nginx Server可以应付的最大连接数为：4 * 8000 = 32000
    # worker_connections 值的设置跟物理内存大小有关
    # 因为并发受IO约束，max_clients的值须小于系统可以打开的最大文件数
    # 而系统可以打开的最大文件数和内存大小成正比，一般1GB内存的机器上可以打开的文件数大约是10万左右
    # 我们来看看360M内存的VPS可以打开的文件句柄数是多少：
    # $ cat /proc/sys/fs/file-max
    # 输出 34336
    # 32000 < 34336，即并发连接总数小于系统可以打开的文件句柄总数，这样就在操作系统可以承受的范围之内
    # 所以，worker_connections 的值需根据 worker_processes 进程数目和系统可以打开的最大文件总数进行适当地进行设置
    # 使得并发总数小于操作系统可以打开的最大文件数目
    # 其实质也就是根据主机的物理CPU和内存进行配置
    # 当然，理论上的并发总数可能会和实际有所偏差，因为主机还有其他的工作进程需要消耗系统资源。
    # ulimit -SHn 65535

    #告诉nginx收到一个新连接通知后接受尽可能多的连接,如果该 HTTP 服务器主要为静态资源服务时,应该开启该配置.
    # multi_accept on;
}

##################################################
# http 配参开始                                  #
##################################################
http {

################################################
# 名称: Mine_type_服务器名称.conf              #
# 描述: 当前服务器支持的媒体文件类型           #
# 用途: 根据Http服务器的业务性质,谨慎匹配需要  #
#       支持的媒体文件类型,不要过分追求通用    #
################################################
include mime.types;

################################################
# 名称: Http_Global_服务器名称.conf            #
# 描述: HTTP全局                               #
# 用途: 设置与upstream联动的全局配置参数       #
#       应在此进行增量配置,以便于管理          #
################################################

#设置默认类型为二进制流,应用根据HTTP的主要业务性质,
#设定需要该全局变量,如:该HTTP服务器只接收Form类型的
#Post,Put请求,则,default_type应为application/x-www-form-urlencoded,
#若只用于接收上传,则,应为multipart/form-data
#default_type application/octet-stream;
default_type text/html;
#默认的字符集
charset UTF-8;

#定义服务端的Hash缓冲区大小
server_names_hash_bucket_size 128;

## 设定请求缓冲 ##
#此指令与client_body_buffer_size类似。 它为请求头分配一个缓冲区。 #如果请求头大小大于指定的缓冲区，则使用large_client_header_buffers指令分配更大的缓冲区。
#指定来自客户端请求头的header buffer大小，设置为32KB
client_header_buffer_size 32k;

#此指令规定了用于读取大型客户端请求头的缓冲区的最大数量和大小。 
#这些缓冲区仅在缺省缓冲区不足时按需分配。 当处理请求或连接转换到保持活动状态时，释放缓冲区。
#指定客户端请求中较大的消息头的缓存最大数量和大小，这里是4个32KB
large_client_header_buffers 4 32k;

#此指令设置用于请求主体的缓冲区大小。如果主体超过缓冲区大小，
#则完整主体或其一部分将写入临时文件。 如果NGINX配置为使用文件而不是内存缓冲区，
#则该指令会被忽略。 默认情况下，该指令为32位系统设置一个8k缓冲区，
#为64位系统设置一个16k缓冲区。
#该指令可在server和location区块中细化使用。
client_body_buffer_size 512k;

#此指令设置NGINX能处理的最大请求主体大小。 如果请求大于指定的大小，
#则，NGINX发回HTTP 413（Request Entity too large）错误。
#如果服务器处理大文件上传，则该指令非常重要。
#如果该值少于后端处理上传或接受请求的服务配置,将造成后端业务逻辑错误
client_max_body_size 50m;

#此指令禁用NGINX缓冲区并将请求体存储在临时文件中。 文件包含纯文本数据。
#该指令可在server和location中进行细化设置。
#   off:该值将禁用文件写入
#   clean：请求body将被写入文件。 该文件将在处理请求后删除。
#   on: 请求正文将被写入文件。 处理请求后，将不会删除该文件。
#默认情况下，指令值为off。
#client_body_in_file_only clean;

#该指令设置NGINX将完整的请求主体存储在单个缓冲区中。 默认情况下，指令值为off。
#如果启用，它将优化读取$request_body变量时涉及的I/O操作,但,需要注意client_body_buffer_size所设置的大小是否充足。
client_body_in_single_buffer on;

#此指令指定存储请求正文的临时文件的位置。 除了位置之外，指令还可以指定文件是否需要最多三个级别的文件夹层次结构。
#级别指定为用于生成文件夹的位数。默认情况下，NGINX在NGINX安装路径下的client_body_temp文件夹创建临时文件。
client_body_temp_path /home/nginx_request_tmp 1 2;


#sendfile 指令指定 nginx 是否调用 sendfile 函数（zero copy 方式）来输出文件，
#对于普通应用，必须设为 on,
#如果用来进行下载等应用磁盘IO重负载应用，可设置为 off，
#以平衡磁盘与网络I/O处理速度，降低系统的uptime.
sendfile on;

#开启高效模式文件传输模式，将tcp_nopush和tcp_nodely两个指另设置为on，用于防止网络阻塞。
#告诉Nginx在一个数据包里发送所有头文件，而不逐一发送
tcp_nopush on;

#告诉nginx不要缓存数据，而是逐段的发送--当需要及时发送数据时，就应该给应用设置这个属性，
#这样发送一小块数据信息时就不能立即得到返回值。
tcp_nodely on;

#设置客户端连接保持活动的超时时间,单位:秒
keepalive_timeout 60;

#设置请求头和请求体(各自)的超时时间
client_header_timeout 10;
client_body_timeout 10;

#告诉nginx关闭不响应的客户端连接,且,释放那个客户端所占有的内存空间
reset_timedout_connection on;

## 同一IP最大连接数限制 ##
# 设置用于保存各种key（比如当前连接数）的共享内存的参数. 5m就是5兆字节,
# 这个值应该被设置的足够大以存储（32K*5）32byte状态或者（16K*5）64byte状态
# limit_conn_zone $binary_remote_addr zone=addr:5m;
# 设置每个IP地址最大允许同时打开多少个连接,这个值需要根据HTTP服务器的应用方向
# 来进行计算, 需要考虑同一个IP N个人使用的情况 或 作为后端资源服务器时,响应效率
# limit_conn addr 100;

#指定客户端的响应超时时间,在这段时间内，客户端没有读取任何数据，nginx就会关闭连接.
#这个设置不会用于整个转发器，而是在两次客户端读取操作之间
send_timeout 10;

#隐藏Nginx的版本号
server_tokens off;

## 日志输出规范 ##
#nginx的HttpLog模块指定，指定nginx日志的输出格式，输出格式为access
log_format access '$remote_addr - $remote_user [$time_local] "$request" '
'$status $body_bytes_sent "$http_referer" '
'"$http_user_agent" "$http_x_forwarded_for"';

#access日志存放的位置
access_log /var/log/nginx/access.log access;

################################################
# 名称: FastCGI_Global_服务器名称.conf         #
# 描述: 全局FastCGI配参                        #
# 用途: 与enable_php.conf配置联动              #
#       应在此进行增量配置,以便于管理          #
################################################
#fastcgi_connect_timeout 300;
#fastcgi_send_timeout 300;
#fastcgi_read_timeout 300;
#fastcgi_buffer_timeout 300;
#fastcgi_buffers 4 64k;
#fastcgi_busy_buffers_size 128k;
#fastcgi_temp_file_write_size 128k;

################################################
# 名称: Gzip_Global_服务器名称.conf            #
# 描述: 全局Gzip配参                           #
# 用途: 任一服务器下的所有Nginx upstream 配置  #
#       应在此进行增量配置,以便于管理          #
################################################
#开启gzip
gzip on;

#允许压缩的最小字节数
gzip_min_length 1k;

#4个单位为16k的内存作为压缩结果流缓存
gzip_buffers 4 16k;

#设置识别HTTP协议版本，默认是1.1
gzip_http_version 1.1;

# 告诉nginx在压缩资源之前，先查找是否有预先gzip处理过的资源.
# 对于时效要求高的情况,该项不应该打开.如: 登录验证类请求会
# 因为该项配置,导致身份校验失败或引发验证漏洞
gzip_static on;

#允许或者禁止压缩基于请求和响应的响应流. 如果设置为Any,意味着将会压缩所有的请求
gzip_proxied   expired no-cache no-store private auth;

#gzip压缩比，可在1~9中设置，1压缩比最小，速度最快，9压缩比最大，速度最慢，消耗CPU
gzip_comp_level 2;

#压缩的类型,针对以下类型的数据进行压缩
gzip_types  application/json text/xml application/xml application/xml+rss text/plain text/css text/javascript application/x-javascript ;

#为指定的客户端禁用gzip功能,以下适配 IE6及以下的浏览器一律不启用gzip.
gzip_disable   "MSIE [1-6]\.";

#让前端的缓存服务器混村经过的gzip压缩的页面
gzip_vary on;


################################################
# 名称: open_file_cache_服务器名称.conf        #
# 描述: Nginx高效文件缓存策略配置              #
# 用途: 以下配参需要谨慎对待,该HTTP服务器主要  #
#       用于完成静态资源访问时,为了减少文件打开#
#       将高频访问的静态文件I放入缓存,以达到高 #
#       并发的需求                             #
################################################
# 打开缓存的同时也指定了缓存最大数目，以及缓存的时间。我们可以设置一个相对高的最大时间，
# 这样我们可以在它们不活动超过20秒后清除掉。
# open_file_cache max=100000 inactive=20s;
# 在open_file_cache中指定检测正确信息的间隔时间。
# open_file_cache_valid 30s;
# 定义了open_file_cache中指令参数不活动时间期间里最小的文件数
# open_file_cache_min_uses 2;
# 指定了当搜索一个文件时是否缓存错误信息，也包括再次给配置中添加文件。
# 我们也包括了服务器模块，这些是在不同文件中定义的。如果你的服务器模块不在这些位置，
# 你就得修改这一行来指定正确的位置。
# open_file_cache_errors on;

################################################
# 名称: upstream_proxy_common_服务器名称.conf  #
# 描述: 全局代理配参                           #
# 用途: 设置与upstream联动的全局配置参数       #
#       应在此进行增量配置,以便于管理          #
################################################
proxy_connect_timeout 5;
proxy_send_timeout 60;
proxy_read_timeout 5;
proxy_buffer_size 16k;
proxy_buffers 4 64k;
proxy_busy_buffers_size 128k;
proxy_temp_file_write_size 128k;

################################################
# 名称: upstream_pool_服务器名称.conf          #
# 描述: Upstream 池                            #
# 用途: 任一服务器下的所有Nginx upstream 配置  #
#       应在此进行增量配置,以便于管理          #
################################################
# upstream 配置一组后端服务器，
# 请求转发到upstream后，nginx按策略将请求指派出某一服务器
# 即配置用于负载均衡的服务器群信息
#upstream 服务器群名称 {
#        #========= 均衡策略 =================================
#        # none 轮询（权重由weight决定）
#        # ip_hash
#        # 通过hash算法将用户的请求与第一次请求的服务器进行绑定，
#        # 后续该用户所有的请求都将被分配到该服务器上。除非该服务器挂掉。
#        #==============  第三方 均衡策略===========
#        # fair  根据各个服务器的性能的不同，自动选择使用响应能力强的服务器。
#        # url_hash 根据url选择服务器。
#
#        #===============服务器集==============
#        server 127.0.0.1:7080;
#        server 127.0.0.1:8080;
#
#        #==========weight权重策略：权重值越高负载越大==========
#        server 127.0.0.1:8080 weight=5;
#
#        #===============backup：备份机，只有非备份机都挂掉了才启用===============
#        server 127.0.0.1:6080 backup;
#
#        #==============down: 停机标志，不会被访问(对临时维护的服务器设置)=============
#        server 127.0.0.1:5080 down;
#
#        # max_fails:达到指定次数认为服务器挂掉；
#        # fail_timeout:挂掉之后过多久再去测试是否已恢复
#        server 127.0.0.1:8080 max_fails=2 fail_timeout=60s;
#}

#upstream nlp.xpp.inner.tomcat {
#    #        IP地址     端口  权重    失败上限        失败时效
#    server 10.10.141.30:8080 weight=1 max_fails=2 fail_timeout=30s;
#}

################################################
# 名称: Block_ServerName_Fix.conf              #
# 描述: 空机头处理                             #
# 用途: 防范恶意挂名到当前服务器               #
################################################
禁止通过ip访问
server {
    server_name _;
    #部分非引流或吸流服务器或敏感服务器,直接返回404
    return 404;
#   location / {
#       #301永久跳转,吸流量
#       rewrite ^/(.*)$ http://www.xpp.cn/$1 permanent;
#    }
}

server {
    listen 80;
    server_name nlp.xpp.cn;
    error_page  404         /404.html;   #错误页面
    error_page  500 502 503 504  /50x.html;
    location = /50x.html {
            root html;
    location / {
    #jsp网站程序根目录，一般nginx与tomcat在同一个目录
            root  /usr/local/tomcat/webapps/ROOT;
            index  index.html index.jsp index.html;
    }
    location ~ .*.jsp$ {
        index index.jsp;
        proxy_pass http://127.0.0.1:8080;   #来自jsp请求交给tomcat处理
        proxy_redirect off;
        proxy_set_header Host $host;    #后端的Web服务器可以通过X-Forwarded-For获取用户真实IP
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        client_max_body_size 10m;   #允许客户端请求的最大单文件字节数
        client_body_buffer_size 128k; #缓冲区代理缓冲用户端请求的最大字节数
        proxy_connect_timeout 90;   #nginx跟后端服务器连接超时时间
        proxy_read_timeout 90;      #连接成功后，后端服务器响应时间
        proxy_buffer_size 4k;       #设置代理服务器（nginx）保存用户头信息的缓冲区大小
        proxy_buffers 6 32k;        #proxy_buffers缓冲区，网页平均在32k以下的话，这样设置
        proxy_busy_buffers_size 64k;#高负荷下缓冲大小（proxy_buffers*2）
        proxy_temp_file_write_size 64k; #设定缓存文件夹大小，大于这个值，将从upstream服务器传
    }
    location ~ .*\.(gif|jpg|png|bmp|swf)$   #由nginx处理静态页面
    {
            expires 30d;   #使用expires缓存模块，缓存到客户端30天
    }
    location ~ .*\.(jsp|js|css)?$
    {
            expires 1d;
    }
}

##################################################
# 引用 vhost 虚拟主机配置                        #
##################################################
include vhost/*.conf;

##################################################
# http 配参结束                                  #
##################################################
}